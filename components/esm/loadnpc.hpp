#ifndef OPENMW_ESM_NPC_H
#define OPENMW_ESM_NPC_H

#include <string>
#include <vector>

#include "defs.hpp"
#include "loadcont.hpp"
#include "aipackage.hpp"
#include "spelllist.hpp"
#include "loadskil.hpp"
#include "transport.hpp"

namespace ESM {

class ESMReader;
class ESMWriter;

const unsigned char FGGS_default[200] ={
	0xD0, 0xEB, 0xD8, 0x3E, 0x50, 0x2F, 0x07, 0x40, 0xD3, 0xCB, 0x5E, 0xBF, 0xEF, 0x6D, 0x86, 0xBF,
	0x00, 0xDA, 0x79, 0x39, 0x6B, 0x61, 0x00, 0xBF, 0x3A, 0xB8, 0xA8, 0x3E, 0x2C, 0xCE, 0x97, 0x3E,
	0x15, 0xBC, 0x39, 0xBE, 0xD4, 0x2A, 0xA3, 0x3F, 0x92, 0x22, 0x01, 0x3D, 0x42, 0x93, 0x93, 0x3F,
	0x78, 0xF2, 0x1C, 0xBF, 0x00, 0x32, 0x52, 0xBE, 0xE3, 0x02, 0xFE, 0x3E, 0xE1, 0x87, 0x04, 0x40,
	0xC8, 0x81, 0x28, 0x3C, 0x97, 0xD7,	0x0C, 0x3F, 0x84, 0xDD, 0xAB, 0xBF, 0xC0, 0xD9, 0x47, 0x3F,
	0x86, 0xFB, 0xD7, 0xBE, 0x3F, 0xB1, 0xF8, 0xBD, 0xDE, 0xED, 0x09, 0xBF, 0xE3, 0xEE, 0x6A, 0xBF,
	0x34, 0xBB, 0x84, 0xBE, 0xAD, 0x21, 0x58, 0x3F, 0x2E, 0xD7, 0x06, 0x3E, 0xC3, 0xE9, 0x23, 0xBE,
	0x18, 0x67, 0x01, 0x3F, 0x26, 0x27, 0x0A, 0xBF, 0x57, 0xD1, 0x5F, 0x3F, 0x65, 0x45, 0x58, 0xBF,
	0xC4, 0x7D, 0x50, 0x3E, 0xA0, 0x0B, 0xDC, 0x3E, 0x53, 0x72, 0x2A, 0xBF, 0xD8, 0xD6, 0xD1, 0x3E,
	0x8C, 0x61, 0x89, 0xBE, 0x24, 0x87, 0x11, 0x3E, 0x76, 0x58, 0x81, 0x3E, 0xC7, 0x40, 0x4B, 0x3F,
	0x26, 0xC1, 0x22, 0xBE, 0x7F, 0x1A, 0x5E, 0x3F, 0x43, 0xF5, 0x30, 0x3E, 0x2B, 0xF7, 0xF2, 0x3D,
	0x0D, 0x6E, 0x2B, 0xBF, 0xF9, 0x40, 0x4C, 0xBF, 0xA6, 0xF4, 0x4A, 0x3F, 0xE3, 0xB6, 0x04, 0x3E,
	0x4F, 0xB9, 0xA9, 0x3F, 0x40, 0x1E, 0x48, 0xBE
};

const unsigned char FGGA_default[120] ={
	0x77, 0x4D, 0x31, 0x3F, 0x0F, 0x1D, 0x3A, 0x3F, 0x78, 0xF9, 0x93, 0xBF, 0xDF, 0x94, 0x23, 0xBE,
	0x49, 0x32, 0x98, 0xBF, 0x69, 0x65, 0x3E, 0x3F, 0x8C, 0x8C, 0xBB, 0x3F, 0x81, 0xBA, 0x11, 0xBE,
	0xF5, 0x09, 0x0D, 0xBE, 0x07, 0x78, 0xA3, 0x3E, 0xAD, 0x64, 0x14, 0x3F, 0x41, 0x83, 0x0F, 0x3F,
	0x09, 0x2E, 0x83, 0xBE, 0x16, 0x7B, 0x6E, 0x3D, 0x88, 0x1B, 0x64, 0x3F, 0xD3, 0x40, 0xE9, 0x3F,
	0x1A, 0xAF, 0xE1, 0x3E, 0xF5, 0xD8, 0x99, 0x3E, 0xAD, 0x68, 0xE3, 0x3D, 0x03, 0xC4, 0x87, 0xBE,
	0x9D, 0x27, 0x3D, 0xBF, 0xE4, 0x52, 0x12, 0xBF, 0xF5, 0x85, 0x3C, 0x3E, 0x62, 0x1F, 0xC9, 0x3F,
	0x33, 0xCE, 0xA2, 0x3F, 0x62, 0xE3, 0xCA, 0x3E, 0x23, 0x0D, 0x61, 0x3E, 0xE5, 0x1C, 0xCB, 0xBD,
	0x12, 0x0E, 0x08, 0xBF, 0x50, 0x02, 0x6C, 0x3F
};

const unsigned char FGTS_default[200] ={
	0x8F, 0x8F, 0xCD, 0xBF, 0x30, 0x63, 0xA1, 0xBD, 0xC2, 0xE2, 0x68, 0xBE, 0xE5, 0x7C, 0xF8, 0x3D,
	0x64, 0xFE, 0xA9, 0x3F, 0xDA, 0x52, 0xC9, 0xBE, 0x6B, 0x79, 0x03, 0x3F, 0xD2, 0x42, 0xBE, 0xBE,
	0x0E, 0x50, 0x9E, 0x3C, 0xBB, 0x93, 0x93, 0x3E, 0x80, 0x1D, 0x6E, 0x3D, 0xA2, 0x36, 0x12, 0xBF,
	0xA2, 0x2F, 0x0B, 0x40, 0xFB, 0x42, 0x9D, 0x3F, 0xB6, 0x59, 0x69, 0x3F, 0x46, 0xE3, 0xD5, 0xBD,
	0xE8, 0x3E, 0x98, 0x3F, 0xCA, 0x65, 0x76, 0xBF, 0x36, 0xDC, 0x57, 0x3F, 0x44, 0xCB, 0xD8, 0x3E,
	0xBC, 0x2C, 0x17, 0xBE, 0x9D, 0xC9, 0x3C, 0xBE, 0xF6, 0x21, 0x07, 0x3E, 0x7B, 0xF0, 0x8F, 0x3F,
	0x74, 0xE3, 0x14, 0xBF, 0x30, 0xFE, 0x77, 0x3C, 0x69, 0xCB, 0xA2, 0x3F, 0x52, 0x1E, 0x65, 0xBE,
	0x88, 0xB8, 0x87, 0x3E, 0x98, 0x60, 0xF7, 0xBD, 0x54, 0xEC, 0x32, 0x3F, 0x3A, 0xA0, 0x8A, 0x3F,
	0xD4, 0x8D, 0x17, 0xBE, 0xEF, 0x1A, 0x00, 0xBF, 0xEC, 0x84, 0x9D, 0xBD, 0x46, 0xE3, 0xDD, 0xBE,
	0x64, 0xA0, 0xE4, 0x3D, 0x03, 0xF7, 0xE2, 0xBE, 0x94, 0xEF, 0x88, 0xBE, 0x4C, 0x83, 0x1A, 0x3F,
	0x27, 0x95, 0x9B, 0xBF, 0x66, 0x7D, 0x0E, 0xBF, 0x57, 0x51, 0xB4, 0x3D, 0xE4, 0xE4, 0xD4, 0xBF,
	0xEE, 0xBC, 0xBC, 0xBF, 0xA8, 0xAB, 0x41, 0x3F, 0xA6, 0x68, 0x01, 0x3F, 0x1E, 0x4B, 0xA6, 0xBE,
	0x9F, 0x4C, 0xAD, 0xBE, 0xCA, 0xFD, 0xBA, 0x3E
};

/*
 * NPC definition
 */

struct NPC
{
    static unsigned int sRecordId;
    /// Return a string descriptor for this record type. Currently used for debugging / error logs only.
    static std::string getRecordType() { return "NPC"; }

  // Services
  enum Services
    {
      // This merchant buys:
      Weapon        = 0x00001,
      Armor         = 0x00002,
      Clothing      = 0x00004,
      Books         = 0x00008,
      Ingredients   = 0x00010,
      Picks         = 0x00020,
      Probes        = 0x00040,
      Lights        = 0x00080,
      Apparatus     = 0x00100,
      RepairItem    = 0x00200,
      Misc          = 0x00400,
      Potions       = 0x02000,

      AllItems = Weapon|Armor|Clothing|Books|Ingredients|Picks|Probes|Lights|Apparatus|RepairItem|Misc|Potions,

      // Other services
      Spells        = 0x00800,
      MagicItems    = 0x01000,
      Training      = 0x04000,
      Spellmaking   = 0x08000,
      Enchanting    = 0x10000,
      Repair        = 0x20000
    };

  enum Flags
    {
      Female        = 0x0001,
      Essential     = 0x0002,
      Respawn       = 0x0004,
      Autocalc      = 0x0010,
      Skeleton      = 0x0400, // Skeleton blood effect (white)
      Metal         = 0x0800  // Metal blood effect (golden?)
    };

  enum NpcType
  {
    NPC_WITH_AUTOCALCULATED_STATS = 12,
    NPC_DEFAULT = 52
  };

    #pragma pack(push)
    #pragma pack(1)

    struct NPDTstruct52
    {
        short mLevel;
        unsigned char mStrength,
             mIntelligence,
             mWillpower,
             mAgility,
             mSpeed,
             mEndurance,
             mPersonality,
             mLuck;

        // mSkill can grow up to 200, it must be unsigned
        unsigned char mSkills[Skill::Length];

        char mFactionID;
        unsigned short mHealth, mMana, mFatigue;
        signed char mDisposition, mReputation, mRank;
        char mUnknown;
        int mGold;
    }; // 52 bytes

    struct NPDTstruct12
    {
        short mLevel;
        // see above
        signed char mDisposition, mReputation, mRank;
        char mUnknown1, mUnknown2, mUnknown3;
        int mGold;
    }; // 12 bytes
    #pragma pack(pop)

    unsigned char mNpdtType;
    NPDTstruct52 mNpdt52;
    NPDTstruct12 mNpdt12; //for autocalculated characters

    int getFactionRank() const; /// wrapper for mNpdt*, -1 = no rank

    int mFlags;

    bool mPersistent;

    InventoryList mInventory;
    SpellList mSpells;

    AIData mAiData;
    bool mHasAI;

    Transport mTransport;

    const std::vector<Transport::Dest>& getTransport() const;

    AIPackageList     mAiPackage;

    std::string mId, mName, mModel, mRace, mClass, mFaction, mScript;

    // body parts
    std::string mHair, mHead;

    void load(ESMReader &esm, bool &isDeleted);
    void save(ESMWriter &esm, bool isDeleted = false) const;
	bool exportTESx(ESMWriter &esm, int export_format) const;

    bool isMale() const;

    void setIsMale(bool value);

    void blank();
    ///< Set record to default state (does not touch the ID).
};
}
#endif
